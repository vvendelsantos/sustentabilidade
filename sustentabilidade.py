import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud

# ---------------------------
# 1. T√≠tulo e Introdu√ß√£o
# ---------------------------
st.title("üîç Classificador Did√°tico de Patentes Sustent√°veis")
st.markdown("""
Este prot√≥tipo educacional mostra como √© poss√≠vel utilizar **indicadores simples** para explorar a rela√ß√£o entre patentes tecnol√≥gicas e **sustentabilidade**, com base em palavras-chave e classifica√ß√µes IPC.
""")

# ---------------------------
# 2. Dados simulados
# ---------------------------
dados = pd.DataFrame({
    'T√≠tulo': [
        'Sistema de gera√ß√£o de energia solar com alta efici√™ncia',
        'M√©todo de produ√ß√£o de pl√°stico biodegrad√°vel a partir de algas',
        'Aquecedor solar compacto para resid√™ncias urbanas',
        'Processo de dessaliniza√ß√£o de √°gua por osmose reversa',
        'Sistema h√≠brido de reaproveitamento de res√≠duos eletr√¥nicos'
    ],
    'Resumo': [
        'Painel solar integrado com otimiza√ß√£o autom√°tica.',
        'Uso de algas para pol√≠meros sustent√°veis.',
        'Tecnologia limpa para aquecimento dom√©stico.',
        'Solu√ß√£o de acesso √† √°gua pot√°vel usando energia limpa.',
        'Tecnologia circular para res√≠duos de eletr√¥nicos.'
    ],
    'IPC': ['Y02E', 'C08L', 'F24J', 'C02F', 'H01M'],
    'Ano': [2022, 2021, 2020, 2023, 2024]
})

# ---------------------------
# 3. Lista de palavras-chave sustent√°veis
# ---------------------------
keywords_verdes = ['solar', 'energia', 'biodegrad√°vel', 'algas', 'limpa', 'reciclagem', 'res√≠duos', 'sustent√°vel', '√°gua', 'pot√°vel', 'renov√°vel']
ipcs_verdes = ['Y02', 'C02', 'F24J']  # IPCs ambientais

# ---------------------------
# 4. Fun√ß√£o de pontua√ß√£o
# ---------------------------
def classificar_patente(titulo, resumo, ipc):
    score = 0
    texto = (titulo + ' ' + resumo).lower()
    
    score += sum(1 for palavra in keywords_verdes if palavra in texto)
    score += any(ipc.startswith(code) for code in ipcs_verdes) * 2

    if score >= 6:
        return 'Alta', score
    elif score >= 3:
        return 'M√©dia', score
    else:
        return 'Baixa', score

# ---------------------------
# 5. Aplicando classifica√ß√£o
# ---------------------------
resultados = []
for i, row in dados.iterrows():
    classe, score = classificar_patente(row['T√≠tulo'], row['Resumo'], row['IPC'])
    resultados.append((classe, score))

dados[['Classifica√ß√£o Sustent√°vel', 'Score']] = resultados

# ---------------------------
# 6. Exibindo tabela
# ---------------------------
st.subheader("üìÑ Resultados das Patentes Avaliadas")
st.dataframe(dados)

# ---------------------------
# 7. Gr√°fico de barras
# ---------------------------
st.subheader("üìä Distribui√ß√£o por N√≠vel de Sustentabilidade")
fig, ax = plt.subplots()
dados['Classifica√ß√£o Sustent√°vel'].value_counts().plot(kind='bar', color=['green', 'orange', 'red'], ax=ax)
plt.xlabel("Classifica√ß√£o")
plt.ylabel("N√∫mero de Patentes")
st.pyplot(fig)

# ---------------------------
# 8. Nuvem de palavras
# ---------------------------
st.subheader("‚òÅÔ∏è Palavras mais frequentes (Resumos)")
texto_total = ' '.join(dados['Resumo'].values).lower()
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(texto_total)
fig_wc, ax_wc = plt.subplots()
ax_wc.imshow(wordcloud, interpolation='bilinear')
ax_wc.axis('off')
st.pyplot(fig_wc)

# ---------------------------
# 9. Download dos dados
# ---------------------------
st.download_button(
    label="‚¨áÔ∏è Baixar Resultados em CSV",
    data=dados.to_csv(index=False).encode('utf-8'),
    file_name='resultados_patentes_sustentaveis.csv',
    mime='text/csv'
)
